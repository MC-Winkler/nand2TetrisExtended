// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU32.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU32Bit {
    IN  
        x[32], y[32],  // 32-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[32], // 32-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
	//Zero the x input (bitwise) if zx==1
	Mux32(a=x,b=false,sel=zx,out=XZeroed);
	
	//Zero the y intput (bitwise) if zy==1
	Mux32(a=y,b=false,sel=zy,out=YZeroed);
	
	//Handle nx
	Not32(in=XZeroed,out=NotX);
	Mux32(a=XZeroed,b=NotX,sel=nx,out=XNeg);
	
	//Handle ny
	Not32(in=YZeroed, out=NotY);
	Mux32(a=YZeroed,b=NotY,sel=ny,out=YNeg);
	
	//Handle f
	And32(a=XNeg,b=YNeg,out=AndXY);	
	Add32(a=XNeg,b=YNeg,out=AddXY);
	Mux32(a=AndXY,b=AddXY,sel=f,out=fXY);
	
	//Handle no, ng
	Not32(in=fXY,out=fXYNeg);
	Mux32(a=fXY,b=fXYNeg,sel=no,out=out,out[0..7]=ZeroCheck1,out[8..15]=ZeroCheck2,out[16..23]=ZeroCheck3,out[24..31]=ZeroCheck4, out[31]=ng);
	
	//Handle zr
	Or8Way(in=ZeroCheck1,out=Or1);
	Or8Way(in=ZeroCheck2,out=Or2);
	Or8Way(in=ZeroCheck3,out=Or3);
	Or8Way(in=ZeroCheck4,out=Or4);
	Or(a=Or1,b=Or2,out=Or5);
	Or(a=Or3,b=Or3,out=Or6);
	Or(a=Or5,b=Or6,out=AtLeastOneOne);
	Not(in=AtLeastOneOne,out=zr);
}