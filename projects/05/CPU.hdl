// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=newA);
	
	Not(in=instruction[15], out=loadA1);
	And(a=instruction[5], b=instruction[15], out=loadA2);
	Or(a=loadA1, b=loadA2, out=loadA);
	ARegister(in=newA, out=AVal, out[0..14]=addressM, load=loadA);
    
	Mux16(a=AVal, b=inM, sel=instruction[12], out=AM);
	
	And(a=instruction[4], b=instruction[15], out=loadD);
	DRegister(in=ALUout, out=DVal, load=loadD);
	
	ALU(x=DVal, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
		f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=outM, out=ALUout);

	Not(in=zr, out=neq);
    Not(in=ng, out=gt);
    
    And(a=neq, b=gt, out=ALUOutgt0);
    And(a=instruction[0], b=ALUOutgt0, out=jgt);
    
    And(a=zr, b=instruction[1], out=jeq);
    Or(a=jeq, b=jgt, out=Load1);

    And(a=ng, b=instruction[2], out=jlt);
    Or(a=jlt, b=Load1, out=Load2);
    And(a=Load2, b=instruction[15], out=Load3);

    PC(in=AVal, load=qcOrLoad3, inc=notQCOut, reset=reset, out=pcOut);
	
	And(a=instruction[15], b=instruction[3], out=writeM);

	QC(count=true, out=qcOut);
	
	Bit(in=qcOut,out=qcOutDelayed);
	
	Or(a=Load3, b=qcOutDelayed, out=qcOrLoad3);
	
	Not(in=qcOut, out=notQCOut);
	
	Register(in[0]=false, in[1]=false, in[2]=false, in[3]=false,
		in[4]=true, in[5]=false, in[6]=false, in[7]=false,
		in[8]=false, in[9]=false, in[10]=false, in[11]=false,
		in[12]=false, in[13]=false, in[14]=false, in[15]=false,
		load = true, out = controlRegister);
		
	Mux16(a=pcOut, b=controlRegister, sel=qcOut, out[0..14]=pc);
}